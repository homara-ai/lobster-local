name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # =====================================================================
  # Version Validation and Tag Creation
  # =====================================================================
  validate-version:
    name: Validate Version and Create Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version setuptools-scm
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: version
      run: |
        # Get current version
        current_version=$(python -c "import lobster; print(lobster.__version__)")
        echo "Current version: $current_version"
        
        # Bump version
        bump2version --current-version $current_version ${{ github.event.inputs.version_type }} --list | grep new_version
        new_version=$(bump2version --current-version $current_version ${{ github.event.inputs.version_type }} --dry-run --list | grep new_version | cut -d= -f2)
        
        echo "New version: $new_version"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        
        # Update version files
        bump2version --current-version $current_version ${{ github.event.inputs.version_type }}
    
    - name: Create and push tag
      run: |
        git tag v${{ steps.version.outputs.new_version }}
        git push origin v${{ steps.version.outputs.new_version }}

  # =====================================================================
  # Pre-release Testing
  # =====================================================================
  pre-release-tests:
    name: Pre-release Comprehensive Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive test suite
      run: |
        mkdir -p tests/.test_cache tests/.test_workspace
        
        # Run all test categories
        python -m pytest \
          --maxfail=5 \
          --durations=20 \
          --cov=lobster \
          --cov-branch \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=pre-release-test-results.xml \
          --timeout=600 \
          -v
    
    - name: Check test coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        import sys
        
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage_percent = float(root.attrib['line-rate']) * 100
            
            print(f'Test coverage: {coverage_percent:.1f}%')
            
            if coverage_percent < 80:
                print(f'ERROR: Test coverage {coverage_percent:.1f}% is below required 80%')
                sys.exit(1)
            else:
                print(f'✓ Test coverage {coverage_percent:.1f}% meets requirement')
                
        except Exception as e:
            print(f'Error checking coverage: {e}')
            sys.exit(1)
        "
    
    - name: Run integration test runner
      run: |
        python tests/run_integration_tests.py \
          --input tests/test_cases.json \
          --output pre-release-integration-results.json \
          --categories basic,advanced \
          --run-pytest-integration \
          --performance-monitoring \
          --log-level INFO
    
    - name: Upload pre-release test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pre-release-test-results
        path: |
          pre-release-test-results.xml
          pre-release-integration-results.json
          htmlcov/
        retention-days: 90

  # =====================================================================
  # Build Release Artifacts
  # =====================================================================
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [pre-release-tests]
    outputs:
      artifact_name: ${{ steps.build.outputs.artifact_name }}
      wheel_path: ${{ steps.build.outputs.wheel_path }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools-scm
    
    - name: Build distribution packages
      id: build
      run: |
        python -m build
        
        # Get artifact information
        wheel_file=$(ls dist/*.whl)
        tarball_file=$(ls dist/*.tar.gz)
        
        echo "wheel_path=$wheel_file" >> $GITHUB_OUTPUT
        echo "artifact_name=lobster-$(python -c 'import lobster; print(lobster.__version__)')" >> $GITHUB_OUTPUT
        
        echo "Built packages:"
        echo "  Wheel: $wheel_file"
        echo "  Source: $tarball_file"
    
    - name: Verify packages
      run: |
        python -m twine check dist/*
        
        # Test wheel installation
        pip install dist/*.whl
        python -c "
        import lobster
        print(f'Successfully imported lobster version {lobster.__version__}')
        
        # Basic functionality test
        from lobster.core.data_manager_v2 import DataManagerV2
        print('✓ DataManagerV2 import successful')
        
        from lobster.core.client import AgentClient  
        print('✓ AgentClient import successful')
        "
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: dist/
        retention-days: 90

  # =====================================================================
  # Security Scan for Release
  # =====================================================================
  security-scan-release:
    name: Security Scan for Release
    runs-on: ubuntu-latest
    needs: [build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
    
    - name: Run comprehensive security scan
      run: |
        echo "# Security Scan Results" > security-report.md
        echo "" >> security-report.md
        
        # Bandit security linting
        echo "## Bandit Security Linting" >> security-report.md
        bandit -r lobster/ -f txt >> security-report.md || true
        
        # Safety dependency vulnerability scan
        echo "" >> security-report.md
        echo "## Safety Dependency Scan" >> security-report.md
        safety check --output text >> security-report.md || true
        
        # Pip-audit for known vulnerabilities
        echo "" >> security-report.md
        echo "## Pip-audit Vulnerability Scan" >> security-report.md
        pip-audit --output text >> security-report.md || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-report
        path: security-report.md
        retention-days: 90

  # =====================================================================
  # Create GitHub Release
  # =====================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, security-scan-release]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Download security report
      uses: actions/download-artifact@v3
      with:
        name: security-scan-report
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ needs.validate-version.outputs.new_version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          last_tag=$(git describe --tags --abbrev=0 HEAD~1)
          echo "Generating changelog since $last_tag"
          
          echo "## Changes in v${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log ${last_tag}..HEAD --oneline --no-merges | while read line; do
            echo "- $line" >> CHANGELOG.md
          done
          
        else
          echo "## Changes in v${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release" >> CHANGELOG.md
        fi
        
        # Add security scan summary
        echo "" >> CHANGELOG.md
        echo "## Security Scan Summary" >> CHANGELOG.md
        echo "Security scans completed - see attached security report for details." >> CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.md
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        files: |
          dist/*.whl
          dist/*.tar.gz
          security-report.md
        token: ${{ secrets.GITHUB_TOKEN }}

  # =====================================================================
  # Publish to PyPI
  # =====================================================================
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: "!inputs.prerelease"
    environment: pypi-production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install twine
      run: pip install twine
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --verbose

  # =====================================================================
  # Publish to Test PyPI (for pre-releases)
  # =====================================================================
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: "inputs.prerelease"
    environment: pypi-test
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install twine
      run: pip install twine
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --verbose

  # =====================================================================
  # Post-Release Validation
  # =====================================================================
  validate-release:
    name: Validate Release Installation
    runs-on: ${{ matrix.os }}
    needs: [publish-pypi, publish-test-pypi]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-test-pypi.result == 'success')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install from PyPI and test
      run: |
        # Wait a bit for PyPI to propagate
        sleep 60
        
        # Install from PyPI
        pip install lobster-ai
        
        # Basic functionality test
        python -c "
        import lobster
        print(f'Successfully installed lobster version {lobster.__version__}')
        
        # Test basic imports
        from lobster.core.data_manager_v2 import DataManagerV2
        from lobster.core.client import AgentClient
        print('✓ All core modules imported successfully')
        
        # Test CLI availability
        import subprocess
        result = subprocess.run(['lobster', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f'✓ CLI available: {result.stdout.strip()}')
        else:
            print('⚠ CLI not available')
        "

  # =====================================================================
  # Update Documentation
  # =====================================================================
  update-docs:
    name: Update Release Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: "!inputs.prerelease"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Update version references
      run: |
        # Update version references in documentation
        if [ -f "README.md" ]; then
          echo "Updating README.md with new version information..."
          # Add version update logic here
        fi
        
        if [ -d "docs" ]; then
          echo "Updating documentation files..."
          # Add documentation update logic here
        fi
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation changes to commit"
        else
          git add -A
          git commit -m "docs: update documentation for release v${{ steps.get_version.outputs.version }}"
          git push
        fi