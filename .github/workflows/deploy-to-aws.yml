name: Deploy to AWS Fargate - ECS

on:
  push:
    branches: [ main ] # Trigger workflow on git push to main branch
  workflow_dispatch: # Allow manual invocation of the workflow

jobs:  
  deploy:
    runs-on: ubuntu-latest
    
    steps:      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}     

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2        

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: homara
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.streamlit .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get AWS Account ID
        id: account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: scripts/ecs-task-definition.json
          container-name: lobster-streamlit
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            AWS_BEDROCK_ACCESS_KEY=${{ secrets.AWS_BEDROCK_ACCESS_KEY }}
            AWS_BEDROCK_SECRET_ACCESS_KEY=${{ secrets.AWS_BEDROCK_SECRET_ACCESS_KEY }}
            NCBI_API_KEY=${{ secrets.NCBI_API_KEY }}
            GENIE_PROFILE=${{ secrets.GENIE_PROFILE }}
            LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
            LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
            LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}

      - name: Update task definition with account ID
        id: update-task-def
        run: |
          # Replace placeholders in task definition
          sed -i "s/ACCOUNT_ID/${{ steps.account-id.outputs.account-id }}/g" ${{ steps.task-def.outputs.task-definition }}
          sed -i "s/IMAGE_TAG/${{ github.sha }}/g" ${{ steps.task-def.outputs.task-definition }}
          echo "Updated task definition with account ID and image tag"

      - name: Deploy Amazon ECS task definition
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Create or Update ECS Service (if not exists)
        id: create-service
        run: |
          # Check if service exists
          if ! aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --region ${{ secrets.AWS_REGION }} --query 'services[?status==`ACTIVE`]' --output text | grep -q ${{ secrets.ECS_SERVICE_NAME }}; then
            echo "Service does not exist, creating..."
            
            # Get default VPC and subnets
            DEFAULT_VPC=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text --region ${{ secrets.AWS_REGION }})
            SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$DEFAULT_VPC" --query 'Subnets[*].SubnetId' --output text --region ${{ secrets.AWS_REGION }} | tr '\t' ',')
            ECS_SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=lobster-ecs-sg" "Name=vpc-id,Values=$DEFAULT_VPC" --query 'SecurityGroups[0].GroupId' --output text --region ${{ secrets.AWS_REGION }})
            
            # Create ALB and Target Group
            ALB_ARN=$(aws elbv2 create-load-balancer \
              --name lobster-alb \
              --subnets $SUBNETS \
              --security-groups $(aws ec2 describe-security-groups --filters "Name=group-name,Values=lobster-alb-sg" "Name=vpc-id,Values=$DEFAULT_VPC" --query 'SecurityGroups[0].GroupId' --output text --region ${{ secrets.AWS_REGION }}) \
              --scheme internet-facing \
              --type application \
              --ip-address-type ipv4 \
              --region ${{ secrets.AWS_REGION }} \
              --query 'LoadBalancers[0].LoadBalancerArn' \
              --output text 2>/dev/null || aws elbv2 describe-load-balancers --names lobster-alb --region ${{ secrets.AWS_REGION }} --query 'LoadBalancers[0].LoadBalancerArn' --output text)
            
            TG_ARN=$(aws elbv2 create-target-group \
              --name lobster-tg \
              --protocol HTTP \
              --port 8501 \
              --vpc-id $DEFAULT_VPC \
              --target-type ip \
              --health-check-path /healthz \
              --health-check-protocol HTTP \
              --health-check-interval-seconds 30 \
              --healthy-threshold-count 2 \
              --unhealthy-threshold-count 3 \
              --region ${{ secrets.AWS_REGION }} \
              --query 'TargetGroups[0].TargetGroupArn' \
              --output text 2>/dev/null || aws elbv2 describe-target-groups --names lobster-tg --region ${{ secrets.AWS_REGION }} --query 'TargetGroups[0].TargetGroupArn' --output text)
            
            # Create listener
            aws elbv2 create-listener \
              --load-balancer-arn $ALB_ARN \
              --protocol HTTP \
              --port 80 \
              --default-actions Type=forward,TargetGroupArn=$TG_ARN \
              --region ${{ secrets.AWS_REGION }} 2>/dev/null || true
            
            # Create ECS service
            aws ecs create-service \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --service-name ${{ secrets.ECS_SERVICE_NAME }} \
              --task-definition lobster-streamlit-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --platform-version LATEST \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$ECS_SG],assignPublicIp=ENABLED}" \
              --load-balancers targetGroupArn=$TG_ARN,containerName=lobster-streamlit,containerPort=8501 \
              --region ${{ secrets.AWS_REGION }}
            
            echo "Service created successfully"
            
            # Get ALB DNS name
            ALB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALB_ARN --region ${{ secrets.AWS_REGION }} --query 'LoadBalancers[0].DNSName' --output text)
            echo "Application will be available at: http://$ALB_DNS"
          else
            echo "Service already exists, deployment completed via task definition update"
          fi
      
      - name: ECS Deployment output
        run: |
          echo "ECS Service: ${{ secrets.ECS_SERVICE_NAME }}"
          echo "ECS Cluster: ${{ secrets.ECS_CLUSTER_NAME }}"
          echo "Task Definition: lobster-streamlit-task"
          echo "Image: ${{ steps.build-image.outputs.image }}"
